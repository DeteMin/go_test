// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: repair/repair.proto

package repair

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
)

// Validate checks the field values on FixKV with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FixKV) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Val

	return nil
}

// FixKVValidationError is the validation error returned by FixKV.Validate if
// the designated constraints aren't met.
type FixKVValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FixKVValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FixKVValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FixKVValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FixKVValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FixKVValidationError) ErrorName() string { return "FixKVValidationError" }

// Error satisfies the builtin error interface
func (e FixKVValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixKV.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FixKVValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FixKVValidationError{}

// Validate checks the field values on RepairRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepairRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Source

	// no validation rules for Market

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for LineType

	// no validation rules for Workers

	for idx, item := range m.GetFixKvs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepairRequestValidationError{
					field:  fmt.Sprintf("FixKvs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RepairAll

	return nil
}

// RepairRequestValidationError is the validation error returned by
// RepairRequest.Validate if the designated constraints aren't met.
type RepairRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepairRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepairRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepairRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepairRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepairRequestValidationError) ErrorName() string { return "RepairRequestValidationError" }

// Error satisfies the builtin error interface
func (e RepairRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepairRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepairRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepairRequestValidationError{}

// Validate checks the field values on RepairResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepairResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for ProgressId

	return nil
}

// RepairResponseValidationError is the validation error returned by
// RepairResponse.Validate if the designated constraints aren't met.
type RepairResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepairResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepairResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepairResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepairResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepairResponseValidationError) ErrorName() string { return "RepairResponseValidationError" }

// Error satisfies the builtin error interface
func (e RepairResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepairResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepairResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepairResponseValidationError{}

// Validate checks the field values on ProgressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProgressRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProgressId

	return nil
}

// ProgressRequestValidationError is the validation error returned by
// ProgressRequest.Validate if the designated constraints aren't met.
type ProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressRequestValidationError) ErrorName() string { return "ProgressRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressRequestValidationError{}

// Validate checks the field values on ProgressResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProgressResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for Status

	// no validation rules for Success

	// no validation rules for Failed

	// no validation rules for Total

	return nil
}

// ProgressResponseValidationError is the validation error returned by
// ProgressResponse.Validate if the designated constraints aren't met.
type ProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressResponseValidationError) ErrorName() string { return "ProgressResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressResponseValidationError{}

// Validate checks the field values on SyncFutuStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncFutuStockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Market

	return nil
}

// SyncFutuStockRequestValidationError is the validation error returned by
// SyncFutuStockRequest.Validate if the designated constraints aren't met.
type SyncFutuStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncFutuStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncFutuStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncFutuStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncFutuStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncFutuStockRequestValidationError) ErrorName() string {
	return "SyncFutuStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncFutuStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncFutuStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncFutuStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncFutuStockRequestValidationError{}

// Validate checks the field values on SyncFutuStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncFutuStockResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for Status

	return nil
}

// SyncFutuStockResponseValidationError is the validation error returned by
// SyncFutuStockResponse.Validate if the designated constraints aren't met.
type SyncFutuStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncFutuStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncFutuStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncFutuStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncFutuStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncFutuStockResponseValidationError) ErrorName() string {
	return "SyncFutuStockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncFutuStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncFutuStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncFutuStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncFutuStockResponseValidationError{}

// Validate checks the field values on PlateIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PlateIndexRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CounterId

	// no validation rules for IpoDate

	// no validation rules for IsAuto

	// no validation rules for IsForce

	return nil
}

// PlateIndexRequestValidationError is the validation error returned by
// PlateIndexRequest.Validate if the designated constraints aren't met.
type PlateIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlateIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlateIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlateIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlateIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlateIndexRequestValidationError) ErrorName() string {
	return "PlateIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlateIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlateIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlateIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlateIndexRequestValidationError{}

// Validate checks the field values on PlateIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PlateIndexResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for Status

	return nil
}

// PlateIndexResponseValidationError is the validation error returned by
// PlateIndexResponse.Validate if the designated constraints aren't met.
type PlateIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlateIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlateIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlateIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlateIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlateIndexResponseValidationError) ErrorName() string {
	return "PlateIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlateIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlateIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlateIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlateIndexResponseValidationError{}

// Validate checks the field values on StockModificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StockModificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OldCounterId

	// no validation rules for NewCounterId

	// no validation rules for ModifyTimestamp

	// no validation rules for Market

	// no validation rules for IsForce

	// no validation rules for ClearDest

	return nil
}

// StockModificationRequestValidationError is the validation error returned by
// StockModificationRequest.Validate if the designated constraints aren't met.
type StockModificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockModificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockModificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockModificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockModificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockModificationRequestValidationError) ErrorName() string {
	return "StockModificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StockModificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockModificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockModificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockModificationRequestValidationError{}

// Validate checks the field values on StockModificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StockModificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for Status

	return nil
}

// StockModificationResponseValidationError is the validation error returned by
// StockModificationResponse.Validate if the designated constraints aren't met.
type StockModificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockModificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockModificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockModificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockModificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockModificationResponseValidationError) ErrorName() string {
	return "StockModificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StockModificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockModificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockModificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockModificationResponseValidationError{}

// Validate checks the field values on SetShortDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetShortDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartDate

	return nil
}

// SetShortDataRequestValidationError is the validation error returned by
// SetShortDataRequest.Validate if the designated constraints aren't met.
type SetShortDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetShortDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetShortDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetShortDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetShortDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetShortDataRequestValidationError) ErrorName() string {
	return "SetShortDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetShortDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetShortDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetShortDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetShortDataRequestValidationError{}

// Validate checks the field values on SetShortDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetShortDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for ErrMsg

	// no validation rules for Status

	return nil
}

// SetShortDataResponseValidationError is the validation error returned by
// SetShortDataResponse.Validate if the designated constraints aren't met.
type SetShortDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetShortDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetShortDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetShortDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetShortDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetShortDataResponseValidationError) ErrorName() string {
	return "SetShortDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetShortDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetShortDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetShortDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetShortDataResponseValidationError{}
