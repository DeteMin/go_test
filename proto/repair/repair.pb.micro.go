// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: repair/repair.proto

package repair

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for QuoteRepair service

type QuoteRepairService interface {
	RepairKline(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	RepairMonthKline(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	RepairTimeShares(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	SyncFutuStock(ctx context.Context, in *SyncFutuStockRequest, opts ...client.CallOption) (*SyncFutuStockResponse, error)
	GetProgress(ctx context.Context, in *ProgressRequest, opts ...client.CallOption) (*ProgressResponse, error)
	StopProgress(ctx context.Context, in *ProgressRequest, opts ...client.CallOption) (*ProgressResponse, error)
	SetKlineHistory(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	SetPlateIndexHistory(ctx context.Context, in *PlateIndexRequest, opts ...client.CallOption) (*PlateIndexResponse, error)
	SetPlateIndexKline(ctx context.Context, in *PlateIndexRequest, opts ...client.CallOption) (*PlateIndexResponse, error)
	RepairPrice(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	RepairAHKlines(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	RepairTradeDetails(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	RepairForwardAdjKlines(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error)
	StockModification(ctx context.Context, in *StockModificationRequest, opts ...client.CallOption) (*StockModificationResponse, error)
	SetShortTradeHistory(ctx context.Context, in *SetShortDataRequest, opts ...client.CallOption) (*SetShortDataResponse, error)
	SetShortPositionHistory(ctx context.Context, in *SetShortDataRequest, opts ...client.CallOption) (*SetShortDataResponse, error)
	UpdateShortTrade(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SetShortDataResponse, error)
	UpdateShortPosition(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SetShortDataResponse, error)
}

type quoteRepairService struct {
	c    client.Client
	name string
}

func NewQuoteRepairService(name string, c client.Client) QuoteRepairService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "repair"
	}
	return &quoteRepairService{
		c:    c,
		name: name,
	}
}

func (c *quoteRepairService) RepairKline(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairKline", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairMonthKline(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairMonthKline", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairTimeShares(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairTimeShares", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SyncFutuStock(ctx context.Context, in *SyncFutuStockRequest, opts ...client.CallOption) (*SyncFutuStockResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SyncFutuStock", in)
	out := new(SyncFutuStockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) GetProgress(ctx context.Context, in *ProgressRequest, opts ...client.CallOption) (*ProgressResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.GetProgress", in)
	out := new(ProgressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) StopProgress(ctx context.Context, in *ProgressRequest, opts ...client.CallOption) (*ProgressResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.StopProgress", in)
	out := new(ProgressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SetKlineHistory(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SetKlineHistory", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SetPlateIndexHistory(ctx context.Context, in *PlateIndexRequest, opts ...client.CallOption) (*PlateIndexResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SetPlateIndexHistory", in)
	out := new(PlateIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SetPlateIndexKline(ctx context.Context, in *PlateIndexRequest, opts ...client.CallOption) (*PlateIndexResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SetPlateIndexKline", in)
	out := new(PlateIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairPrice(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairPrice", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairAHKlines(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairAHKlines", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairTradeDetails(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairTradeDetails", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) RepairForwardAdjKlines(ctx context.Context, in *RepairRequest, opts ...client.CallOption) (*RepairResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.RepairForwardAdjKlines", in)
	out := new(RepairResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) StockModification(ctx context.Context, in *StockModificationRequest, opts ...client.CallOption) (*StockModificationResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.StockModification", in)
	out := new(StockModificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SetShortTradeHistory(ctx context.Context, in *SetShortDataRequest, opts ...client.CallOption) (*SetShortDataResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SetShortTradeHistory", in)
	out := new(SetShortDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) SetShortPositionHistory(ctx context.Context, in *SetShortDataRequest, opts ...client.CallOption) (*SetShortDataResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.SetShortPositionHistory", in)
	out := new(SetShortDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) UpdateShortTrade(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SetShortDataResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.UpdateShortTrade", in)
	out := new(SetShortDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteRepairService) UpdateShortPosition(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*SetShortDataResponse, error) {
	req := c.c.NewRequest(c.name, "QuoteRepair.UpdateShortPosition", in)
	out := new(SetShortDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QuoteRepair service

type QuoteRepairHandler interface {
	RepairKline(context.Context, *RepairRequest, *RepairResponse) error
	RepairMonthKline(context.Context, *RepairRequest, *RepairResponse) error
	RepairTimeShares(context.Context, *RepairRequest, *RepairResponse) error
	SyncFutuStock(context.Context, *SyncFutuStockRequest, *SyncFutuStockResponse) error
	GetProgress(context.Context, *ProgressRequest, *ProgressResponse) error
	StopProgress(context.Context, *ProgressRequest, *ProgressResponse) error
	SetKlineHistory(context.Context, *RepairRequest, *RepairResponse) error
	SetPlateIndexHistory(context.Context, *PlateIndexRequest, *PlateIndexResponse) error
	SetPlateIndexKline(context.Context, *PlateIndexRequest, *PlateIndexResponse) error
	RepairPrice(context.Context, *RepairRequest, *RepairResponse) error
	RepairAHKlines(context.Context, *RepairRequest, *RepairResponse) error
	RepairTradeDetails(context.Context, *RepairRequest, *RepairResponse) error
	RepairForwardAdjKlines(context.Context, *RepairRequest, *RepairResponse) error
	StockModification(context.Context, *StockModificationRequest, *StockModificationResponse) error
	SetShortTradeHistory(context.Context, *SetShortDataRequest, *SetShortDataResponse) error
	SetShortPositionHistory(context.Context, *SetShortDataRequest, *SetShortDataResponse) error
	UpdateShortTrade(context.Context, *emptypb.Empty, *SetShortDataResponse) error
	UpdateShortPosition(context.Context, *emptypb.Empty, *SetShortDataResponse) error
}

func RegisterQuoteRepairHandler(s server.Server, hdlr QuoteRepairHandler, opts ...server.HandlerOption) error {
	type quoteRepair interface {
		RepairKline(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		RepairMonthKline(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		RepairTimeShares(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		SyncFutuStock(ctx context.Context, in *SyncFutuStockRequest, out *SyncFutuStockResponse) error
		GetProgress(ctx context.Context, in *ProgressRequest, out *ProgressResponse) error
		StopProgress(ctx context.Context, in *ProgressRequest, out *ProgressResponse) error
		SetKlineHistory(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		SetPlateIndexHistory(ctx context.Context, in *PlateIndexRequest, out *PlateIndexResponse) error
		SetPlateIndexKline(ctx context.Context, in *PlateIndexRequest, out *PlateIndexResponse) error
		RepairPrice(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		RepairAHKlines(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		RepairTradeDetails(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		RepairForwardAdjKlines(ctx context.Context, in *RepairRequest, out *RepairResponse) error
		StockModification(ctx context.Context, in *StockModificationRequest, out *StockModificationResponse) error
		SetShortTradeHistory(ctx context.Context, in *SetShortDataRequest, out *SetShortDataResponse) error
		SetShortPositionHistory(ctx context.Context, in *SetShortDataRequest, out *SetShortDataResponse) error
		UpdateShortTrade(ctx context.Context, in *emptypb.Empty, out *SetShortDataResponse) error
		UpdateShortPosition(ctx context.Context, in *emptypb.Empty, out *SetShortDataResponse) error
	}
	type QuoteRepair struct {
		quoteRepair
	}
	h := &quoteRepairHandler{hdlr}
	return s.Handle(s.NewHandler(&QuoteRepair{h}, opts...))
}

type quoteRepairHandler struct {
	QuoteRepairHandler
}

func (h *quoteRepairHandler) RepairKline(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairKline(ctx, in, out)
}

func (h *quoteRepairHandler) RepairMonthKline(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairMonthKline(ctx, in, out)
}

func (h *quoteRepairHandler) RepairTimeShares(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairTimeShares(ctx, in, out)
}

func (h *quoteRepairHandler) SyncFutuStock(ctx context.Context, in *SyncFutuStockRequest, out *SyncFutuStockResponse) error {
	return h.QuoteRepairHandler.SyncFutuStock(ctx, in, out)
}

func (h *quoteRepairHandler) GetProgress(ctx context.Context, in *ProgressRequest, out *ProgressResponse) error {
	return h.QuoteRepairHandler.GetProgress(ctx, in, out)
}

func (h *quoteRepairHandler) StopProgress(ctx context.Context, in *ProgressRequest, out *ProgressResponse) error {
	return h.QuoteRepairHandler.StopProgress(ctx, in, out)
}

func (h *quoteRepairHandler) SetKlineHistory(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.SetKlineHistory(ctx, in, out)
}

func (h *quoteRepairHandler) SetPlateIndexHistory(ctx context.Context, in *PlateIndexRequest, out *PlateIndexResponse) error {
	return h.QuoteRepairHandler.SetPlateIndexHistory(ctx, in, out)
}

func (h *quoteRepairHandler) SetPlateIndexKline(ctx context.Context, in *PlateIndexRequest, out *PlateIndexResponse) error {
	return h.QuoteRepairHandler.SetPlateIndexKline(ctx, in, out)
}

func (h *quoteRepairHandler) RepairPrice(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairPrice(ctx, in, out)
}

func (h *quoteRepairHandler) RepairAHKlines(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairAHKlines(ctx, in, out)
}

func (h *quoteRepairHandler) RepairTradeDetails(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairTradeDetails(ctx, in, out)
}

func (h *quoteRepairHandler) RepairForwardAdjKlines(ctx context.Context, in *RepairRequest, out *RepairResponse) error {
	return h.QuoteRepairHandler.RepairForwardAdjKlines(ctx, in, out)
}

func (h *quoteRepairHandler) StockModification(ctx context.Context, in *StockModificationRequest, out *StockModificationResponse) error {
	return h.QuoteRepairHandler.StockModification(ctx, in, out)
}

func (h *quoteRepairHandler) SetShortTradeHistory(ctx context.Context, in *SetShortDataRequest, out *SetShortDataResponse) error {
	return h.QuoteRepairHandler.SetShortTradeHistory(ctx, in, out)
}

func (h *quoteRepairHandler) SetShortPositionHistory(ctx context.Context, in *SetShortDataRequest, out *SetShortDataResponse) error {
	return h.QuoteRepairHandler.SetShortPositionHistory(ctx, in, out)
}

func (h *quoteRepairHandler) UpdateShortTrade(ctx context.Context, in *emptypb.Empty, out *SetShortDataResponse) error {
	return h.QuoteRepairHandler.UpdateShortTrade(ctx, in, out)
}

func (h *quoteRepairHandler) UpdateShortPosition(ctx context.Context, in *emptypb.Empty, out *SetShortDataResponse) error {
	return h.QuoteRepairHandler.UpdateShortPosition(ctx, in, out)
}
